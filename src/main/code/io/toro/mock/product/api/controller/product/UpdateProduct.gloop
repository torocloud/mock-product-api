{
    "input": [
        {
            "name": "product",
            "type": "model",
            "reference": "io.toro.mock.product.model.product.Product"
        }
    ],
    "output": [
        {
            "name": "response",
            "type": "model",
            "reference": "io.toro.mock.product.model.Response"
        },
        {
            "name": "responseCode",
            "type": "integer"
        }
    ],
    "steps": [
        {
            "type": "block",
            "blockType": "TRY_CATCH",
            "children": [
                {
                    "type": "invokeGloop",
                    "name": "io.toro.mock.product.api.controller.product.GetProduct",
                    "declare": [
                        {
                            "variables": [
                                {
                                    "name": "getProductResponse",
                                    "type": "model",
                                    "gloopProperties": [
                                        {
                                            "name": "response",
                                            "type": "model",
                                            "reference": "io.toro.mock.product.model.Response"
                                        },
                                        {
                                            "name": "responseCode",
                                            "type": "integer"
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "inputs": [
                        {
                            "from": [
                                "product",
                                "productCode"
                            ],
                            "to": [
                                "productCode"
                            ]
                        }
                    ],
                    "outputs": [
                        {
                            "from": [
                                "response"
                            ],
                            "to": [
                                "getProductResponse",
                                "response"
                            ]
                        },
                        {
                            "from": [
                                "responseCode"
                            ],
                            "to": [
                                "getProductResponse",
                                "responseCode"
                            ]
                        }
                    ]
                },
                {
                    "type": "fork",
                    "expression": "getProductResponse.responseCode",
                    "children": [
                        {
                            "type": "invokeGloop",
                            "label": "200",
                            "name": "io.toro.mock.product.sql.product.UpdateProduct",
                            "inputs": [
                                {
                                    "from": [
                                        "product",
                                        "productCode"
                                    ],
                                    "to": [
                                        "updateProductInput",
                                        "productCode"
                                    ]
                                },
                                {
                                    "from": [
                                        "product",
                                        "productName"
                                    ],
                                    "to": [
                                        "updateProductInput",
                                        "productName"
                                    ]
                                },
                                {
                                    "from": [
                                        "product",
                                        "productLine"
                                    ],
                                    "to": [
                                        "updateProductInput",
                                        "productLine"
                                    ]
                                },
                                {
                                    "from": [
                                        "product",
                                        "productScale"
                                    ],
                                    "to": [
                                        "updateProductInput",
                                        "productScale"
                                    ]
                                },
                                {
                                    "from": [
                                        "product",
                                        "productVendor"
                                    ],
                                    "to": [
                                        "updateProductInput",
                                        "productVendor"
                                    ]
                                },
                                {
                                    "from": [
                                        "product",
                                        "productDescription"
                                    ],
                                    "to": [
                                        "updateProductInput",
                                        "productDescription"
                                    ]
                                },
                                {
                                    "from": [
                                        "product",
                                        "quantityInStock"
                                    ],
                                    "to": [
                                        "updateProductInput",
                                        "quantityInStock"
                                    ]
                                },
                                {
                                    "from": [
                                        "product",
                                        "buyPrice"
                                    ],
                                    "to": [
                                        "updateProductInput",
                                        "buyPrice"
                                    ]
                                },
                                {
                                    "from": [
                                        "product",
                                        "msrp"
                                    ],
                                    "to": [
                                        "updateProductInput",
                                        "msrp"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "product.customField?.isNullValue()? \"{}\": product.customField.asJson(false, false)",
                                    "evaluate": true,
                                    "to": [
                                        "updateProductInput",
                                        "customField"
                                    ]
                                }
                            ],
                            "outputs": [
                                {
                                    "type": "set",
                                    "expression": "Updated",
                                    "to": [
                                        "response",
                                        "result"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "\"Successfully updated product with product code \\\"${product.productCode}\\\".\"",
                                    "evaluate": true,
                                    "to": [
                                        "response",
                                        "message"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "200",
                                    "to": [
                                        "responseCode"
                                    ]
                                }
                            ]
                        },
                        {
                            "label": "$else",
                            "lines": [
                                {
                                    "from": [
                                        "getProductResponse",
                                        "response"
                                    ],
                                    "to": [
                                        "response"
                                    ]
                                },
                                {
                                    "from": [
                                        "getProductResponse",
                                        "responseCode"
                                    ],
                                    "to": [
                                        "responseCode"
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "catch": [
                {
                    "type": "fork",
                    "comments": "Check if the exception caught is an SQL Exception",
                    "expression": "$gloopException.type == \"SQLIntegrityConstraintViolationException\"",
                    "children": [
                        {
                            "type": "invokeCode",
                            "label": "true",
                            "comments": "If the exception caught is an SQLIntegrityConstraintViolationException, set the appropriate response code (400)",
                            "className": "io.toro.martini.LoggerMethods",
                            "methodName": "error",
                            "parameters": [
                                "java.lang.String",
                                "java.lang.Throwable"
                            ],
                            "inputs": [
                                {
                                    "from": [
                                        "$gloopException",
                                        "realException"
                                    ],
                                    "to": [
                                        "throwable"
                                    ]
                                },
                                {
                                    "from": [
                                        "$gloopException",
                                        "gloopStackTrace"
                                    ],
                                    "to": [
                                        "message"
                                    ]
                                }
                            ],
                            "outputs": [
                                {
                                    "type": "set",
                                    "expression": "400",
                                    "to": [
                                        "responseCode"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "ERROR",
                                    "to": [
                                        "response",
                                        "result"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "$gloopException.message",
                                    "evaluate": true,
                                    "to": [
                                        "response",
                                        "message"
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "invokeCode",
                            "label": "false",
                            "comments": "If it's not an SQLIntegretyConstraintViolationException, set the approriate response code (500)",
                            "className": "io.toro.martini.LoggerMethods",
                            "methodName": "error",
                            "parameters": [
                                "java.lang.String",
                                "java.lang.Throwable"
                            ],
                            "inputs": [
                                {
                                    "from": [
                                        "$gloopException",
                                        "realException"
                                    ],
                                    "to": [
                                        "throwable"
                                    ]
                                },
                                {
                                    "from": [
                                        "$gloopException",
                                        "gloopStackTrace"
                                    ],
                                    "to": [
                                        "message"
                                    ]
                                }
                            ],
                            "outputs": [
                                {
                                    "type": "set",
                                    "expression": "500",
                                    "to": [
                                        "responseCode"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "$gloopException.message",
                                    "evaluate": true,
                                    "to": [
                                        "response",
                                        "message"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "ERROR",
                                    "to": [
                                        "response",
                                        "result"
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}